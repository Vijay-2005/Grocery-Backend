# Production Environment Configuration
# ===============================
# This file contains settings specifically for the production deployment
# of the grocery ordering application. It's activated by setting the
# Spring profile to "prod" (e.g., using SPRING_PROFILES_ACTIVE=prod)

# Application Identity
# -------------------
spring.application.name=orderapp

# Server Configuration
# -------------------
# HTTP port configuration with environment variable override
# Uses PORT environment variable if available, otherwise defaults to 8080
server.port=${PORT:8080}

# Database Configuration - Production Database
# -------------------------------------------
# JDBC connection string with environment variable support
# The DATABASE_URL environment variable should be set in the production environment
spring.datasource.url=${DATABASE_URL:jdbc:mysql://root:lXMmSbkCNDnDSqhIRRQpOzoIBAHNZfaV@interchange.proxy.rlwy.net:52270/railway}

# Database credentials from environment variables with fallbacks
# In production, these should always be set as environment variables
spring.datasource.username=${MYSQL_USERNAME:root}
spring.datasource.password=${MYSQL_PASSWORD:lXMmSbkCNDnDSqhIRRQpOzoIBAHNZfaV}

# MySQL JDBC driver configuration
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate JPA configuration
# --------------------------
# 'update' keeps the schema in sync with domain models
# For production, consider using 'validate' after the schema is established
spring.jpa.hibernate.ddl-auto=update

# Specifies the SQL dialect for optimized MySQL queries
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Monitoring & Health Checks
# -------------------------
# Exposes actuator endpoints for health monitoring systems
management.endpoints.web.exposure.include=health,info

# Shows detailed health information in monitoring responses
management.endpoint.health.show-details=always

# Disables disk space check (often not relevant in containerized environments)
management.health.diskspace.enabled=false

# Enables Kubernetes-style health probes (liveness/readiness)
management.endpoint.health.probes.enabled=true

# Logging Configuration
# -------------------
# Root logging level
logging.level.root=INFO

# Application-specific logging level
logging.level.com.example.orderapp=INFO

# Log file location and naming
logging.file.name=logs/grocery-app.log

# Console log format for better readability in log aggregation systems
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# CORS (Cross-Origin Resource Sharing) Configuration
# -------------------------------------------------
# Allowed origins with environment variable support
# In production, this should be set to specific frontend domain(s)
spring.mvc.cors.allowed-origins=${ALLOWED_ORIGINS:*}

# HTTP methods allowed for cross-origin requests
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS

# CORS preflight cache duration in seconds
spring.mvc.cors.max-age=3600

# Allowed headers for cross-origin requests
spring.mvc.cors.allowed-headers=*

# Firebase Authentication Configuration
# -----------------------------------
# Path to Firebase service account credentials
# In production, consider using environment variables for the actual path
firebase.service.account.file=classpath:firebase-service-account.json

# Security Mode Configuration
# --------------------------
# Controls whether authentication is required
# Should always be set to false in production
app.auth.development-mode=${DEVELOPMENT_MODE:false}